syntax = "proto3";

package facade_service;
option go_package = "./protobuf_generated";
/* command:
protoc --go_out=. --go-grpc_out=. facade.proto
*/
//=================
// SERVICES
//=================

service UserService {
    // auth:login, AuthenticateToken
    rpc LoginAndAuthenticate (LoginRequest) returns (AuthResponse);
    // auth:validate_token, userdb:get username
    rpc AuthenticateToken (TokenRequest) returns (AuthResponse);
    // auth:register, appdb:make demo project, LoginAndAuthenticate
    rpc CreateAccount(RegisterRequest) returns (AuthResponse);

    // userdb: friends
    rpc getFriends(UserID) returns (FriendsResponse);
    // userdb: friend_requests
    rpc getFriendRequests(UserID) returns (FriendsResponse);

    // userdb: addFriendRequest bij ene, addFriendRequest bij andere
    rpc addFriendRequest(FriendEditRequest) returns (FriendsResponse);
    // userdb: addFriend bij ene, addFriend bij andere
    rpc addFriend(FriendEditRequest) returns (FriendsResponse);

    // userdb: removeFriendRequest bij ene, removeFriendRequest bij andere
    rpc removeFriendRequest(FriendEditRequest) returns (FriendsResponse);
    // userdb: removeFriend bij ene, removeFriend bij andere
    rpc removeFriend(FriendEditRequest) returns (FriendsResponse);
}

service NotificationService {
    rpc subscribeFriendList(UserID) returns (Empty);
}

//=================
// MESSAGES
//=================
message Empty {}
message FriendEditRequest{
    string user_id = 1;
    string friend_id = 2;
}
message UserID{
    string user_id = 1;
}
message User{
    string first_name = 1;
    string last_name = 2;
    string id = 3;
}
message FriendsResponse{
    repeated User users = 1;
}
message LoginRequest {
    string email = 1;
    string password = 2;
}
message TokenRequest {
    string token = 1;
}
message RegisterRequest {
    string email = 1;
    string password = 2;
    string first_name = 3;
    string last_name = 4;
}
message AuthResponse {
    bool valid = 1;
    string token = 2;
    User user = 3;
}