// Code generated by gowsdl DO NOT EDIT.

package soap_generated

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type GetOutgoingStats struct {
	XMLName xml.Name `xml:"http://ebbew.be/ getOutgoingStats"`
}

type GetOutgoingStatsResponse struct {
	XMLName xml.Name `xml:"http://ebbew.be/ getOutgoingStatsResponse"`

	Return_ *OutgoingStatsResponse `xml:"return,omitempty" json:"return,omitempty"`
}

type OutgoingStatsResponse struct {
	XMLName xml.Name `xml:"http://ebbew.be/ outgoingStatsResponse"`

	Counts []*OutgoingStats `xml:"counts,omitempty" json:"counts,omitempty"`
}

type OutgoingStats struct {
	XMLName xml.Name `xml:"http://ebbew.be/ outgoingStats"`

	Count int32 `xml:"count,omitempty" json:"count,omitempty"`

	Identifier string `xml:"identifier,omitempty" json:"identifier,omitempty"`

	RequestTime int32 `xml:"requestTime,omitempty" json:"requestTime,omitempty"`

	Rpm int32 `xml:"rpm,omitempty" json:"rpm,omitempty"`

	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`

	ServiceType string `xml:"serviceType,omitempty" json:"serviceType,omitempty"`
}

type RegisterOutgoingStart struct {
	XMLName xml.Name `xml:"http://ebbew.be/ registerOutgoingStart"`

	ServiceType string `xml:"serviceType,omitempty" json:"serviceType,omitempty"`

	Identifier string `xml:"identifier,omitempty" json:"identifier,omitempty"`

	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`
}

type RegisterOutgoingStartResponse struct {
	XMLName xml.Name `xml:"http://ebbew.be/ registerOutgoingStartResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type RegisterOutgoingEnd struct {
	XMLName xml.Name `xml:"http://ebbew.be/ registerOutgoingEnd"`

	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`
}

type RegisterOutgoingEndResponse struct {
	XMLName xml.Name `xml:"http://ebbew.be/ registerOutgoingEndResponse"`
}

type Main interface {
	RegisterOutgoingStart(request *RegisterOutgoingStart) (*RegisterOutgoingStartResponse, error)

	RegisterOutgoingStartContext(ctx context.Context, request *RegisterOutgoingStart) (*RegisterOutgoingStartResponse, error)

	RegisterOutgoingEnd(request *RegisterOutgoingEnd) (*RegisterOutgoingEndResponse, error)

	RegisterOutgoingEndContext(ctx context.Context, request *RegisterOutgoingEnd) (*RegisterOutgoingEndResponse, error)

	GetOutgoingStats(request *GetOutgoingStats) (*GetOutgoingStatsResponse, error)

	GetOutgoingStatsContext(ctx context.Context, request *GetOutgoingStats) (*GetOutgoingStatsResponse, error)
}

type main struct {
	client *soap.Client
}

func NewMain(client *soap.Client) Main {
	return &main{
		client: client,
	}
}

func (service *main) RegisterOutgoingStartContext(ctx context.Context, request *RegisterOutgoingStart) (*RegisterOutgoingStartResponse, error) {
	response := new(RegisterOutgoingStartResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *main) RegisterOutgoingStart(request *RegisterOutgoingStart) (*RegisterOutgoingStartResponse, error) {
	return service.RegisterOutgoingStartContext(
		context.Background(),
		request,
	)
}

func (service *main) RegisterOutgoingEndContext(ctx context.Context, request *RegisterOutgoingEnd) (*RegisterOutgoingEndResponse, error) {
	response := new(RegisterOutgoingEndResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *main) RegisterOutgoingEnd(request *RegisterOutgoingEnd) (*RegisterOutgoingEndResponse, error) {
	return service.RegisterOutgoingEndContext(
		context.Background(),
		request,
	)
}

func (service *main) GetOutgoingStatsContext(ctx context.Context, request *GetOutgoingStats) (*GetOutgoingStatsResponse, error) {
	response := new(GetOutgoingStatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *main) GetOutgoingStats(request *GetOutgoingStats) (*GetOutgoingStatsResponse, error) {
	return service.GetOutgoingStatsContext(
		context.Background(),
		request,
	)
}
