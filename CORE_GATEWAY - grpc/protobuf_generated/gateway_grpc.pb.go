// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: gateway.proto

package protobuf_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_LoginAndAuthenticate_FullMethodName = "/gateway_service.UserService/LoginAndAuthenticate"
	UserService_AuthenticateToken_FullMethodName    = "/gateway_service.UserService/AuthenticateToken"
	UserService_CreateAccount_FullMethodName        = "/gateway_service.UserService/CreateAccount"
	UserService_GetFriends_FullMethodName           = "/gateway_service.UserService/getFriends"
	UserService_GetFriendRequests_FullMethodName    = "/gateway_service.UserService/getFriendRequests"
	UserService_GetUserName_FullMethodName          = "/gateway_service.UserService/GetUserName"
	UserService_SendFriendRequest_FullMethodName    = "/gateway_service.UserService/sendFriendRequest"
	UserService_AcceptFriendRequest_FullMethodName  = "/gateway_service.UserService/acceptFriendRequest"
	UserService_RejectFriendRequest_FullMethodName  = "/gateway_service.UserService/RejectFriendRequest"
	UserService_RemoveFriend_FullMethodName         = "/gateway_service.UserService/removeFriend"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// auth:login, AuthenticateToken
	LoginAndAuthenticate(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// auth:validate_token, userdb:get username
	AuthenticateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// auth:register, appdb:make demo project, LoginAndAuthenticate
	CreateAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	// userdb: friends
	GetFriends(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FriendsResponse, error)
	// userdb: friend_requests
	GetFriendRequests(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FriendsResponse, error)
	// userdb: get username
	GetUserName(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	// userdb: addFriendRequest bij friend
	// notifier: send notification to friend, send update friend requests list to friend
	SendFriendRequest(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*Empty, error)
	// userdb: addFriend bij user, remove request bij user, addFriend bij friend
	// notifier: subscribe elkaar, update friend's friends list
	AcceptFriendRequest(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	// userdb: remove request bij user
	RejectFriendRequest(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	// userdb: removeFriend bij user, removeFriend bij friend
	// notifier: unsubscribe elkaar, update friend's friends list
	RemoveFriend(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) LoginAndAuthenticate(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, UserService_LoginAndAuthenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AuthenticateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, UserService_AuthenticateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, UserService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriends(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, UserService_GetFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriendRequests(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, UserService_GetFriendRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserName(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendFriendRequest(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserService_SendFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AcceptFriendRequest(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, UserService_AcceptFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RejectFriendRequest(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, UserService_RejectFriendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveFriend(ctx context.Context, in *FriendEditRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// auth:login, AuthenticateToken
	LoginAndAuthenticate(context.Context, *LoginRequest) (*AuthResponse, error)
	// auth:validate_token, userdb:get username
	AuthenticateToken(context.Context, *TokenRequest) (*AuthResponse, error)
	// auth:register, appdb:make demo project, LoginAndAuthenticate
	CreateAccount(context.Context, *RegisterRequest) (*AuthResponse, error)
	// userdb: friends
	GetFriends(context.Context, *UserID) (*FriendsResponse, error)
	// userdb: friend_requests
	GetFriendRequests(context.Context, *UserID) (*FriendsResponse, error)
	// userdb: get username
	GetUserName(context.Context, *UserID) (*User, error)
	// userdb: addFriendRequest bij friend
	// notifier: send notification to friend, send update friend requests list to friend
	SendFriendRequest(context.Context, *FriendEditRequest) (*Empty, error)
	// userdb: addFriend bij user, remove request bij user, addFriend bij friend
	// notifier: subscribe elkaar, update friend's friends list
	AcceptFriendRequest(context.Context, *FriendEditRequest) (*FriendsResponse, error)
	// userdb: remove request bij user
	RejectFriendRequest(context.Context, *FriendEditRequest) (*FriendsResponse, error)
	// userdb: removeFriend bij user, removeFriend bij friend
	// notifier: unsubscribe elkaar, update friend's friends list
	RemoveFriend(context.Context, *FriendEditRequest) (*FriendsResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) LoginAndAuthenticate(context.Context, *LoginRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAndAuthenticate not implemented")
}
func (UnimplementedUserServiceServer) AuthenticateToken(context.Context, *TokenRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateToken not implemented")
}
func (UnimplementedUserServiceServer) CreateAccount(context.Context, *RegisterRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedUserServiceServer) GetFriends(context.Context, *UserID) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedUserServiceServer) GetFriendRequests(context.Context, *UserID) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendRequests not implemented")
}
func (UnimplementedUserServiceServer) GetUserName(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserName not implemented")
}
func (UnimplementedUserServiceServer) SendFriendRequest(context.Context, *FriendEditRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFriendRequest not implemented")
}
func (UnimplementedUserServiceServer) AcceptFriendRequest(context.Context, *FriendEditRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriendRequest not implemented")
}
func (UnimplementedUserServiceServer) RejectFriendRequest(context.Context, *FriendEditRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectFriendRequest not implemented")
}
func (UnimplementedUserServiceServer) RemoveFriend(context.Context, *FriendEditRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_LoginAndAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginAndAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginAndAuthenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginAndAuthenticate(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AuthenticateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AuthenticateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AuthenticateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AuthenticateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateAccount(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFriends(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetFriendRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFriendRequests(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserName(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendFriendRequest(ctx, req.(*FriendEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AcceptFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AcceptFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AcceptFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AcceptFriendRequest(ctx, req.(*FriendEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RejectFriendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RejectFriendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RejectFriendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RejectFriendRequest(ctx, req.(*FriendEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveFriend(ctx, req.(*FriendEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginAndAuthenticate",
			Handler:    _UserService_LoginAndAuthenticate_Handler,
		},
		{
			MethodName: "AuthenticateToken",
			Handler:    _UserService_AuthenticateToken_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _UserService_CreateAccount_Handler,
		},
		{
			MethodName: "getFriends",
			Handler:    _UserService_GetFriends_Handler,
		},
		{
			MethodName: "getFriendRequests",
			Handler:    _UserService_GetFriendRequests_Handler,
		},
		{
			MethodName: "GetUserName",
			Handler:    _UserService_GetUserName_Handler,
		},
		{
			MethodName: "sendFriendRequest",
			Handler:    _UserService_SendFriendRequest_Handler,
		},
		{
			MethodName: "acceptFriendRequest",
			Handler:    _UserService_AcceptFriendRequest_Handler,
		},
		{
			MethodName: "RejectFriendRequest",
			Handler:    _UserService_RejectFriendRequest_Handler,
		},
		{
			MethodName: "removeFriend",
			Handler:    _UserService_RemoveFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}

const (
	NotificationService_SubscribeFriendList_FullMethodName       = "/gateway_service.NotificationService/subscribeFriendList"
	NotificationService_SubscribeProjectsList_FullMethodName     = "/gateway_service.NotificationService/subscribeProjectsList"
	NotificationService_SwitchProjectSubscription_FullMethodName = "/gateway_service.NotificationService/switchProjectSubscription"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SubscribeFriendList(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error)
	SubscribeProjectsList(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error)
	SwitchProjectSubscription(ctx context.Context, in *ProjectSubscribeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SubscribeFriendList(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotificationService_SubscribeFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SubscribeProjectsList(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotificationService_SubscribeProjectsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SwitchProjectSubscription(ctx context.Context, in *ProjectSubscribeRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotificationService_SwitchProjectSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	SubscribeFriendList(context.Context, *UserID) (*Empty, error)
	SubscribeProjectsList(context.Context, *UserID) (*Empty, error)
	SwitchProjectSubscription(context.Context, *ProjectSubscribeRequest) (*Empty, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SubscribeFriendList(context.Context, *UserID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeFriendList not implemented")
}
func (UnimplementedNotificationServiceServer) SubscribeProjectsList(context.Context, *UserID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeProjectsList not implemented")
}
func (UnimplementedNotificationServiceServer) SwitchProjectSubscription(context.Context, *ProjectSubscribeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchProjectSubscription not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SubscribeFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SubscribeFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SubscribeFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SubscribeFriendList(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SubscribeProjectsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SubscribeProjectsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SubscribeProjectsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SubscribeProjectsList(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SwitchProjectSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SwitchProjectSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SwitchProjectSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SwitchProjectSubscription(ctx, req.(*ProjectSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway_service.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subscribeFriendList",
			Handler:    _NotificationService_SubscribeFriendList_Handler,
		},
		{
			MethodName: "subscribeProjectsList",
			Handler:    _NotificationService_SubscribeProjectsList_Handler,
		},
		{
			MethodName: "switchProjectSubscription",
			Handler:    _NotificationService_SwitchProjectSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}

const (
	ProjectService_CreateProject_FullMethodName            = "/gateway_service.ProjectService/CreateProject"
	ProjectService_GetFullProjectById_FullMethodName       = "/gateway_service.ProjectService/GetFullProjectById"
	ProjectService_GetProjectsFromUser_FullMethodName      = "/gateway_service.ProjectService/GetProjectsFromUser"
	ProjectService_AddUserToProject_FullMethodName         = "/gateway_service.ProjectService/AddUserToProject"
	ProjectService_CreateMilestoneInProject_FullMethodName = "/gateway_service.ProjectService/CreateMilestoneInProject"
	ProjectService_CreateTaskInMilestone_FullMethodName    = "/gateway_service.ProjectService/CreateTaskInMilestone"
	ProjectService_AddProblemToTask_FullMethodName         = "/gateway_service.ProjectService/AddProblemToTask"
	ProjectService_ResolveProblem_FullMethodName           = "/gateway_service.ProjectService/ResolveProblem"
	ProjectService_AssignTask_FullMethodName               = "/gateway_service.ProjectService/AssignTask"
	ProjectService_CompleteTask_FullMethodName             = "/gateway_service.ProjectService/CompleteTask"
	ProjectService_Hello_FullMethodName                    = "/gateway_service.ProjectService/Hello"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// proj_fac: CreateProject
	// notifier: send update projects list to user
	CreateProject(ctx context.Context, in *ProjectCreateRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj_fac: GetFullProjectById
	GetFullProjectById(ctx context.Context, in *ProjectID, opts ...grpc.CallOption) (*Project, error)
	// proj_fac: GetProjectsFromUser
	GetProjectsFromUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ProjectsList, error)
	// proj_fac: AddUserToProject
	// notifier:
	// - publish update users list
	// - publish notification "new member"
	// - send update projects list  to friend
	// - send notification to friend "you are added"
	AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj facacde: CreateMilestoneInProject
	// notifier: publish update milestones list
	CreateMilestoneInProject(ctx context.Context, in *MilestoneAddRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj facade: CreateTaskInMilestone
	// notifier: publish udpate tasks list
	CreateTaskInMilestone(ctx context.Context, in *TaskAddRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj facade: AddProblemToTask
	// notifier:
	// - publish udpate problems list
	// - publish notification "new problem"
	AddProblemToTask(ctx context.Context, in *ProblemAddRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj facade: ResolveProblem
	// notifier:
	// - publish udpate problems list
	// - publish notification "problem solved"
	ResolveProblem(ctx context.Context, in *ResolveProblemRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj facade: AssignTask
	// notifier: publish udpate task
	AssignTask(ctx context.Context, in *TaskAssignRequest, opts ...grpc.CallOption) (*Empty, error)
	// proj facade: CompleteTask
	// notifier:
	// - publish udpate task
	// - publish notification "task completed"
	CompleteTask(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*Empty, error)
	Hello(ctx context.Context, in *World, opts ...grpc.CallOption) (*HelloWorld, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *ProjectCreateRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetFullProjectById(ctx context.Context, in *ProjectID, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_GetFullProjectById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectsFromUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ProjectsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectsList)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectsFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_AddUserToProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateMilestoneInProject(ctx context.Context, in *MilestoneAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_CreateMilestoneInProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateTaskInMilestone(ctx context.Context, in *TaskAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_CreateTaskInMilestone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddProblemToTask(ctx context.Context, in *ProblemAddRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_AddProblemToTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ResolveProblem(ctx context.Context, in *ResolveProblemRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_ResolveProblem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AssignTask(ctx context.Context, in *TaskAssignRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_AssignTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CompleteTask(ctx context.Context, in *TaskCompleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectService_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Hello(ctx context.Context, in *World, opts ...grpc.CallOption) (*HelloWorld, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloWorld)
	err := c.cc.Invoke(ctx, ProjectService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility.
type ProjectServiceServer interface {
	// proj_fac: CreateProject
	// notifier: send update projects list to user
	CreateProject(context.Context, *ProjectCreateRequest) (*Empty, error)
	// proj_fac: GetFullProjectById
	GetFullProjectById(context.Context, *ProjectID) (*Project, error)
	// proj_fac: GetProjectsFromUser
	GetProjectsFromUser(context.Context, *UserID) (*ProjectsList, error)
	// proj_fac: AddUserToProject
	// notifier:
	// - publish update users list
	// - publish notification "new member"
	// - send update projects list  to friend
	// - send notification to friend "you are added"
	AddUserToProject(context.Context, *AddUserToProjectRequest) (*Empty, error)
	// proj facacde: CreateMilestoneInProject
	// notifier: publish update milestones list
	CreateMilestoneInProject(context.Context, *MilestoneAddRequest) (*Empty, error)
	// proj facade: CreateTaskInMilestone
	// notifier: publish udpate tasks list
	CreateTaskInMilestone(context.Context, *TaskAddRequest) (*Empty, error)
	// proj facade: AddProblemToTask
	// notifier:
	// - publish udpate problems list
	// - publish notification "new problem"
	AddProblemToTask(context.Context, *ProblemAddRequest) (*Empty, error)
	// proj facade: ResolveProblem
	// notifier:
	// - publish udpate problems list
	// - publish notification "problem solved"
	ResolveProblem(context.Context, *ResolveProblemRequest) (*Empty, error)
	// proj facade: AssignTask
	// notifier: publish udpate task
	AssignTask(context.Context, *TaskAssignRequest) (*Empty, error)
	// proj facade: CompleteTask
	// notifier:
	// - publish udpate task
	// - publish notification "task completed"
	CompleteTask(context.Context, *TaskCompleteRequest) (*Empty, error)
	Hello(context.Context, *World) (*HelloWorld, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectServiceServer struct{}

func (UnimplementedProjectServiceServer) CreateProject(context.Context, *ProjectCreateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) GetFullProjectById(context.Context, *ProjectID) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullProjectById not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectsFromUser(context.Context, *UserID) (*ProjectsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsFromUser not implemented")
}
func (UnimplementedProjectServiceServer) AddUserToProject(context.Context, *AddUserToProjectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToProject not implemented")
}
func (UnimplementedProjectServiceServer) CreateMilestoneInProject(context.Context, *MilestoneAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMilestoneInProject not implemented")
}
func (UnimplementedProjectServiceServer) CreateTaskInMilestone(context.Context, *TaskAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskInMilestone not implemented")
}
func (UnimplementedProjectServiceServer) AddProblemToTask(context.Context, *ProblemAddRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProblemToTask not implemented")
}
func (UnimplementedProjectServiceServer) ResolveProblem(context.Context, *ResolveProblemRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveProblem not implemented")
}
func (UnimplementedProjectServiceServer) AssignTask(context.Context, *TaskAssignRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTask not implemented")
}
func (UnimplementedProjectServiceServer) CompleteTask(context.Context, *TaskCompleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedProjectServiceServer) Hello(context.Context, *World) (*HelloWorld, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}
func (UnimplementedProjectServiceServer) testEmbeddedByValue()                        {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedProjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*ProjectCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetFullProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetFullProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetFullProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetFullProjectById(ctx, req.(*ProjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectsFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectsFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectsFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectsFromUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddUserToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddUserToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddUserToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddUserToProject(ctx, req.(*AddUserToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateMilestoneInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MilestoneAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateMilestoneInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateMilestoneInProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateMilestoneInProject(ctx, req.(*MilestoneAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateTaskInMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateTaskInMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateTaskInMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateTaskInMilestone(ctx, req.(*TaskAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddProblemToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProblemAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddProblemToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddProblemToTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddProblemToTask(ctx, req.(*ProblemAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ResolveProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ResolveProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ResolveProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ResolveProblem(ctx, req.(*ResolveProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AssignTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AssignTask(ctx, req.(*TaskAssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CompleteTask(ctx, req.(*TaskCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(World)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Hello(ctx, req.(*World))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway_service.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "GetFullProjectById",
			Handler:    _ProjectService_GetFullProjectById_Handler,
		},
		{
			MethodName: "GetProjectsFromUser",
			Handler:    _ProjectService_GetProjectsFromUser_Handler,
		},
		{
			MethodName: "AddUserToProject",
			Handler:    _ProjectService_AddUserToProject_Handler,
		},
		{
			MethodName: "CreateMilestoneInProject",
			Handler:    _ProjectService_CreateMilestoneInProject_Handler,
		},
		{
			MethodName: "CreateTaskInMilestone",
			Handler:    _ProjectService_CreateTaskInMilestone_Handler,
		},
		{
			MethodName: "AddProblemToTask",
			Handler:    _ProjectService_AddProblemToTask_Handler,
		},
		{
			MethodName: "ResolveProblem",
			Handler:    _ProjectService_ResolveProblem_Handler,
		},
		{
			MethodName: "AssignTask",
			Handler:    _ProjectService_AssignTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _ProjectService_CompleteTask_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _ProjectService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
